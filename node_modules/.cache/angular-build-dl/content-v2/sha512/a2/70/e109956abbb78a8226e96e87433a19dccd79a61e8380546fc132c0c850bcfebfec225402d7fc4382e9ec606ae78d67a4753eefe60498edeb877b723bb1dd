{"version":3,"sources":["webpack:///src/app/pages/resetpss/resetpss.page.html","webpack:///src/app/pages/resetpss/resetpss-routing.module.ts","webpack:///src/app/pages/resetpss/resetpss.module.ts","webpack:///src/app/pages/resetpss/resetpss.page.scss","webpack:///src/app/pages/resetpss/resetpss.page.ts","webpack:///src/app/services/fbauth.service.ts"],"names":["routes","path","component","ResetpssPageRoutingModule","imports","forChild","exports","ResetpssPageModule","declarations","ResetpssPage","FBauth_service","router","email","console","log","reset_password","selector","template","FBAuthService","AFauth","toastController","correo_electronico","contrasenia","Promise","resolve","reject","signInWithEmailAndPassword","then","res","err","error","signOut","navigate","correo_recuperacion","presentToastFeedback","sendPasswordResetEmail","text","create","message","duration","position","toast","present","providedIn"],"mappings":"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","file":"pages-resetpss-resetpss-module-es5.js","sourcesContent":["export default \"<ion-content >\\n  \\n  <ion-img class=\\\"icon\\\" src=\\\"assets/imgs/LOGO2.png\\\">\\n  </ion-img>\\n\\n  \\n  <form class=\\\"content-items\\\" (submit)=\\\"send_reset_password()\\\">\\n    <small class=\\\"content-text ion-text-center\\\">Ingresa tu correo electrónico para recuperar tu contraseña</small>\\n\\n    <ion-item class=\\\"content-input\\\">\\n      <ion-input placeholder=\\\"Correo electronico\\\"  type=\\\"email\\\" [(ngModel)]=\\\"email\\\" name=\\\"email\\\" required=\\\"true\\\">\\n      </ion-input>\\n    </ion-item>\\n     \\n      <ion-button expand=\\\"full\\\" class=\\\"boton\\\" type=\\\"submit\\\">\\n        RECUPERAR CONTRASEÑA\\n      </ion-button>\\n \\n\\n  </form>\\n  \\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ResetpssPage } from './resetpss.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ResetpssPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ResetpssPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ResetpssPageRoutingModule } from './resetpss-routing.module';\n\nimport { ResetpssPage } from './resetpss.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ResetpssPageRoutingModule\n  ],\n  declarations: [ResetpssPage]\n})\nexport class ResetpssPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3Jlc2V0cHNzL3Jlc2V0cHNzLnBhZ2Uuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { FBAuthService } from 'src/app/services/fbauth.service';\n\n@Component({\n  selector: 'app-resetpss',\n  templateUrl: './resetpss.page.html',\n  styleUrls: ['./resetpss.page.scss'],\n})\nexport class ResetpssPage implements OnInit {\n  public email:string=\"\"\n  constructor(\n    private FBauth_service: FBAuthService, \n    private router: Router\n  ) { }\n\n  ngOnInit() {\n  }\n\n  send_reset_password(){\n    console.log(\"Se enviara el correo...\");\n    this.FBauth_service.reset_password(this.email);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { Router } from '@angular/router';\nimport { ToastController } from '@ionic/angular';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FBAuthService {\n  constructor(\n    private AFauth: AngularFireAuth,\n    private router: Router,\n    public toastController: ToastController) { }\n  login(correo_electronico: string, contrasenia: string) {\n    return new Promise(\n      (resolve, reject) => {\n        this.AFauth.signInWithEmailAndPassword(correo_electronico, contrasenia)\n          .then(res => {\n            console.log(res)\n            resolve(res)\n          }).catch(\n            err => {\n              console.error('ERROR> En la auth. Linea 16 in auth.service.ts' + err)\n              reject(err)\n            }\n          )\n      }\n    );\n  }\n\n\n  /**\n   * Logout de respuesta asincrona que en caso de ser exitosa \n   * redirecciona a la pantalla de login, sino lanza un error.\n   * @returns una promesa \n   */\n  logout() {\n    return this.AFauth.signOut()\n      .then(() => {\n        this.router.navigate(['/login'])\n        console.log('Redirigir')\n      }\n      ).catch(\n        err => {\n          console.error('ERROR> En la auth. Linea 42 in auth.service.ts' + err)\n\n        }\n      )\n  }\n\n  /**\n   * Usa el obj AFauth para enviar un correo de recuperacion de contraseña al proveedor que lo solicita.\n   * Nota: Se puede personalizar el mensaje enviado desde firebase/console/authentication\n   * Pdt: Para probar se recomienda usar un email temporal, debidamente registrado como usuario.\n   * @param correo_recuperacion (del proveedor) destino donde se enviara el mensaje\n   */\n  reset_password(correo_recuperacion: string) {\n    if (correo_recuperacion == \"\") {\n      this.presentToastFeedback('Debe ingresar un correo electronico.')\n      //alert(\"Debe ingresar un correo electronico.\")\n    } else {\n      this.AFauth.sendPasswordResetEmail(correo_recuperacion)\n        .then(\n          (res) => {\n            console.log(\"Email se envio\")\n            this.presentToastFeedback('Listo!, Revisa en tu correo');\n            this.router.navigate(['login'])\n          }\n        ).catch(\n          (err) => {\n            this.presentToastFeedback(\"ERROR en reset password \" + err);\n            console.error(\"ERROR en reset password  \" + err)\n          }\n        )\n    }\n  }\n\n  async presentToastFeedback(text: string) {\n    const toast = await this.toastController.create({\n      message: text,\n      duration: 2000,\n      position: 'top',\n    });\n    toast.present();\n  }\n}\n\n"]}