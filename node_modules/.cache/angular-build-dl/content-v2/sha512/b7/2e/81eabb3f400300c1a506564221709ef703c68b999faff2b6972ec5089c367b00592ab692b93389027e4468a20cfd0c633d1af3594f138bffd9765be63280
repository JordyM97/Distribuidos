{"version":3,"sources":["./src/app/pages/resetpss/resetpss.page.html","./src/app/pages/resetpss/resetpss-routing.module.ts","./src/app/pages/resetpss/resetpss.module.ts","./src/app/pages/resetpss/resetpss.page.scss","./src/app/pages/resetpss/resetpss.page.ts","./src/app/services/fbauth.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAe,0sBAA2oB,E;;;;;;;;;;;;;;;;;;;ACAjnB;AACc;AAER;AAE/C,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,2DAAY;KACxB;CACF,CAAC;AAMF,IAAa,yBAAyB,GAAtC,MAAa,yBAAyB;CAAG;AAA5B,yBAAyB;IAJrC,8DAAQ,CAAC;QACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;KACxB,CAAC;GACW,yBAAyB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;AChBG;AACM;AACF;AAEA;AAEyB;AAEvB;AAW/C,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;CAAG;AAArB,kBAAkB;IAT9B,8DAAQ,CAAC;QACR,OAAO,EAAE;YACP,4DAAY;YACZ,0DAAW;YACX,0DAAW;YACX,kFAAyB;SAC1B;QACD,YAAY,EAAE,CAAC,2DAAY,CAAC;KAC7B,CAAC;GACW,kBAAkB,CAAG;AAAH;;;;;;;;;;;;;ACnB/B;AAAe,6GAA8C,mJAAmJ,E;;;;;;;;;;;;;;;;;;;ACA9J;AACT;AAEuB;AAOhE,IAAa,YAAY,GAAzB,MAAa,YAAY;IAEvB,YACU,cAA6B,EAC7B,MAAc;QADd,mBAAc,GAAd,cAAc,CAAe;QAC7B,WAAM,GAAN,MAAM,CAAQ;QAHjB,UAAK,GAAQ,EAAE;IAIlB,CAAC;IAEL,QAAQ;IACR,CAAC;IAED,mBAAmB;QACjB,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;QACvC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACjD,CAAC;CACF;;YAX2B,6EAAa;YACrB,sDAAM;;AAJb,YAAY;IALxB,+DAAS,CAAC;QACT,QAAQ,EAAE,cAAc;QACxB,gOAAmC;;KAEpC,CAAC;GACW,YAAY,CAcxB;AAdwB;;;;;;;;;;;;;;;;;;;;;ACVkB;AACU;AACZ;AACQ;AAKjD,IAAa,aAAa,GAA1B,MAAa,aAAa;IACxB,YACU,MAAuB,EACvB,MAAc,EACf,eAAgC;QAF/B,WAAM,GAAN,MAAM,CAAiB;QACvB,WAAM,GAAN,MAAM,CAAQ;QACf,oBAAe,GAAf,eAAe,CAAiB;IAAI,CAAC;IAC9C,KAAK,CAAC,kBAA0B,EAAE,WAAmB;QACnD,OAAO,IAAI,OAAO,CAChB,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAClB,IAAI,CAAC,MAAM,CAAC,0BAA0B,CAAC,kBAAkB,EAAE,WAAW,CAAC;iBACpE,IAAI,CAAC,GAAG,CAAC,EAAE;gBACV,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;gBAChB,OAAO,CAAC,GAAG,CAAC;YACd,CAAC,CAAC,CAAC,KAAK,CACN,GAAG,CAAC,EAAE;gBACJ,OAAO,CAAC,KAAK,CAAC,gDAAgD,GAAG,GAAG,CAAC;gBACrE,MAAM,CAAC,GAAG,CAAC;YACb,CAAC,CACF;QACL,CAAC,CACF,CAAC;IACJ,CAAC;IAGD;;;;OAIG;IACH,MAAM;QACJ,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;aACzB,IAAI,CAAC,GAAG,EAAE;YACT,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;YAChC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;QAC1B,CAAC,CACA,CAAC,KAAK,CACL,GAAG,CAAC,EAAE;YACJ,OAAO,CAAC,KAAK,CAAC,gDAAgD,GAAG,GAAG,CAAC;QAEvE,CAAC,CACF;IACL,CAAC;IAED;;;;;OAKG;IACH,cAAc,CAAC,mBAA2B;QACxC,IAAI,mBAAmB,IAAI,EAAE,EAAE;YAC7B,IAAI,CAAC,oBAAoB,CAAC,sCAAsC,CAAC;YACjE,+CAA+C;SAChD;aAAM;YACL,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC,mBAAmB,CAAC;iBACpD,IAAI,CACH,CAAC,GAAG,EAAE,EAAE;gBACN,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC;gBAC7B,IAAI,CAAC,oBAAoB,CAAC,6BAA6B,CAAC,CAAC;gBACzD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;YACjC,CAAC,CACF,CAAC,KAAK,CACL,CAAC,GAAG,EAAE,EAAE;gBACN,IAAI,CAAC,oBAAoB,CAAC,0BAA0B,GAAG,GAAG,CAAC,CAAC;gBAC5D,OAAO,CAAC,KAAK,CAAC,2BAA2B,GAAG,GAAG,CAAC;YAClD,CAAC,CACF;SACJ;IACH,CAAC;IAEK,oBAAoB,CAAC,IAAY;;YACrC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;gBAC9C,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,IAAI;gBACd,QAAQ,EAAE,KAAK;aAChB,CAAC,CAAC;YACH,KAAK,CAAC,OAAO,EAAE,CAAC;QAClB,CAAC;KAAA;CACF;;YA3EmB,kEAAe;YACf,sDAAM;YACE,8DAAe;;AAJ9B,aAAa;IAHzB,gEAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,aAAa,CA6EzB;AA7EyB","file":"pages-resetpss-resetpss-module-es2015.js","sourcesContent":["export default \"<ion-content >\\n  \\n  <ion-img class=\\\"icon\\\" src=\\\"assets/imgs/LOGO2.png\\\">\\n  </ion-img>\\n\\n  \\n  <form class=\\\"content-items\\\" (submit)=\\\"send_reset_password()\\\">\\n    <small class=\\\"content-text ion-text-center\\\">Ingresa tu correo electrónico para recuperar tu contraseña</small>\\n\\n    <ion-item class=\\\"content-input\\\">\\n      <ion-input placeholder=\\\"Correo electronico\\\"  type=\\\"email\\\" [(ngModel)]=\\\"email\\\" name=\\\"email\\\" required=\\\"true\\\">\\n      </ion-input>\\n    </ion-item>\\n     \\n      <ion-button expand=\\\"full\\\" class=\\\"boton\\\" type=\\\"submit\\\">\\n        RECUPERAR CONTRASEÑA\\n      </ion-button>\\n \\n\\n  </form>\\n  \\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ResetpssPage } from './resetpss.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ResetpssPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ResetpssPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ResetpssPageRoutingModule } from './resetpss-routing.module';\n\nimport { ResetpssPage } from './resetpss.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ResetpssPageRoutingModule\n  ],\n  declarations: [ResetpssPage]\n})\nexport class ResetpssPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3Jlc2V0cHNzL3Jlc2V0cHNzLnBhZ2Uuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { FBAuthService } from 'src/app/services/fbauth.service';\n\n@Component({\n  selector: 'app-resetpss',\n  templateUrl: './resetpss.page.html',\n  styleUrls: ['./resetpss.page.scss'],\n})\nexport class ResetpssPage implements OnInit {\n  public email:string=\"\"\n  constructor(\n    private FBauth_service: FBAuthService, \n    private router: Router\n  ) { }\n\n  ngOnInit() {\n  }\n\n  send_reset_password(){\n    console.log(\"Se enviara el correo...\");\n    this.FBauth_service.reset_password(this.email);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { Router } from '@angular/router';\nimport { ToastController } from '@ionic/angular';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FBAuthService {\n  constructor(\n    private AFauth: AngularFireAuth,\n    private router: Router,\n    public toastController: ToastController) { }\n  login(correo_electronico: string, contrasenia: string) {\n    return new Promise(\n      (resolve, reject) => {\n        this.AFauth.signInWithEmailAndPassword(correo_electronico, contrasenia)\n          .then(res => {\n            console.log(res)\n            resolve(res)\n          }).catch(\n            err => {\n              console.error('ERROR> En la auth. Linea 16 in auth.service.ts' + err)\n              reject(err)\n            }\n          )\n      }\n    );\n  }\n\n\n  /**\n   * Logout de respuesta asincrona que en caso de ser exitosa \n   * redirecciona a la pantalla de login, sino lanza un error.\n   * @returns una promesa \n   */\n  logout() {\n    return this.AFauth.signOut()\n      .then(() => {\n        this.router.navigate(['/login'])\n        console.log('Redirigir')\n      }\n      ).catch(\n        err => {\n          console.error('ERROR> En la auth. Linea 42 in auth.service.ts' + err)\n\n        }\n      )\n  }\n\n  /**\n   * Usa el obj AFauth para enviar un correo de recuperacion de contraseña al proveedor que lo solicita.\n   * Nota: Se puede personalizar el mensaje enviado desde firebase/console/authentication\n   * Pdt: Para probar se recomienda usar un email temporal, debidamente registrado como usuario.\n   * @param correo_recuperacion (del proveedor) destino donde se enviara el mensaje\n   */\n  reset_password(correo_recuperacion: string) {\n    if (correo_recuperacion == \"\") {\n      this.presentToastFeedback('Debe ingresar un correo electronico.')\n      //alert(\"Debe ingresar un correo electronico.\")\n    } else {\n      this.AFauth.sendPasswordResetEmail(correo_recuperacion)\n        .then(\n          (res) => {\n            console.log(\"Email se envio\")\n            this.presentToastFeedback('Listo!, Revisa en tu correo');\n            this.router.navigate(['login'])\n          }\n        ).catch(\n          (err) => {\n            this.presentToastFeedback(\"ERROR en reset password \" + err);\n            console.error(\"ERROR en reset password  \" + err)\n          }\n        )\n    }\n  }\n\n  async presentToastFeedback(text: string) {\n    const toast = await this.toastController.create({\n      message: text,\n      duration: 2000,\n      position: 'top',\n    });\n    toast.present();\n  }\n}\n\n"],"sourceRoot":"webpack:///"}